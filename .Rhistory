sigma_down <- ((n-1)*Return_var)/qchisq(p = conf_int_quantile_down, df = chisq_df)
# Watch the signs?
Var_up <- -V*(1 - exp(Return_mean +sqrt(sigma_up)* norm_inverse))
Var_down <- -V*(1 - exp(Return_mean +sqrt(sigma_down)* norm_inverse))
############################################
############# Part b ########################
###########################################
# Following steps on slide 31
# First simulate sigma
chisq_MC <- rchisq(numb_sim, chisq_df)
sigma2_MC <- ((n-1)*Return_var)/(chisq_MC)
sigma_MC <- sqrt(sigma2_MC)
# Simulate mean of the VaR
for(sim in 1:numb_sim){
mu_MC <- rnorm(1,mean = Return_mean, sd = (sigma_MC[sim]/sqrt(n)))
}
# Simulate VaR alpha
VaR_alpha_MC = -V*(1 - exp(mu_MC +sigma_MC* norm_inverse))
hist(VaR_alpha_MC, breaks = 40)
VaR_MC_mean <- mean(VaR_alpha_MC)
VaR_MC_conf_int <- quantile(VaR_alpha_MC,c((beta/2),(1-beta/2)))
VaR_alpha = -V*(1 - exp(Return_mean +sqrt(Return_var)* norm_inverse))
# Use slide 27 equations for upper and lower sigma paramter
conf_int_quantile_down<- beta/2
conf_int_quantile_up <- 1-beta/2
chisq_df <- n-1
sigma_up <- ((n-1)*Return_var)/qchisq(p = conf_int_quantile_up , df = chisq_df)
sigma_down <- ((n-1)*Return_var)/qchisq(p = conf_int_quantile_down, df = chisq_df)
# Watch the signs?
Var_up <- -V*(1 - exp(Return_mean +sqrt(sigma_up)* norm_inverse))
Var_down <- -V*(1 - exp(Return_mean +sqrt(sigma_down)* norm_inverse))
############################################
############# Part b ########################
###########################################
# Following steps on slide 31
# First simulate sigma
chisq_MC <- rchisq(numb_sim, chisq_df)
sigma2_MC <- ((n-1)*Return_var)/(chisq_MC)
sigma_MC <- sqrt(sigma2_MC)
# Simulate mean of the VaR
for(sim in 1:numb_sim){
mu_MC <- rnorm(1,mean = Return_mean, sd = (sigma_MC[sim]/sqrt(n)))
}
# Simulate VaR alpha
VaR_alpha_MC = -V*(1 - exp(mu_MC +sigma_MC* norm_inverse))
hist(VaR_alpha_MC, breaks = 40)
VaR_MC_mean <- mean(VaR_alpha_MC)
VaR_MC_conf_int <- quantile(VaR_alpha_MC,c((beta/2),(1-beta/2)))
conf_ints <- c(conf_int_quantile_down, conf_int_quantile_up)
chisq_df <- n-1
sigmas_known <- ((n-1)*Return_var)/qchisq(p = conf_ints , df = chisq_df)
Var_up <- -V*(1 - exp(Return_mean +sqrt(sigmas_known)* norm_inverse))
Var_up
VaR_MC_conf_int <- quantile(VaR_alpha_MC,conf_ints)
VaR_known = -V*(1 - exp(Return_mean +sqrt(Return_var)* norm_inverse))
Var_known = -V*(1 - exp(Return_mean +sqrt(Return_var)* norm_inverse))
Var_know_conf_int
Var_known_conf_int <- -V*(1 - exp(Return_mean +sqrt(sigmas_known)* norm_inverse))
# Homework 5 Part 2
# Read data and look at summary statistics
data <- read.csv("SP500_Log_Returns_20150101_20160101.csv")
head(data)
Returns <- data[[4]]
plot(Returns, type = 'l')
hist(Returns, breaks = 30)
# Initialize parameters
V <- 1e6
alpha <- 0.95
beta <- 0.025
numb_sim <- 100000 # M
n <- length(Returns) # number of observations
# Part a
Return_mean <- mean(Returns)
Return_var <- var(Returns)
norm_inverse <- qnorm((1-alpha), mean= 0, sd=1)
Var_known = -V*(1 - exp(Return_mean +sqrt(Return_var)* norm_inverse))
# Use slide 27 equations for upper and lower sigma paramter
conf_int_quantile_down<- beta/2
conf_int_quantile_up <- 1-beta/2
conf_ints <- c(conf_int_quantile_down, conf_int_quantile_up)
chisq_df <- n-1
sigmas_known <- ((n-1)*Return_var)/qchisq(p = conf_ints , df = chisq_df)
#sigma_down <- ((n-1)*Return_var)/qchisq(p = conf_int_quantile_down, df = chisq_df)
# Watch the signs?
Var_known_conf_int <- -V*(1 - exp(Return_mean +sqrt(sigmas_known)* norm_inverse))
# Var_down <- -V*(1 - exp(Return_mean +sqrt(sigma_down)* norm_inverse))
############################################
############# Part b ########################
###########################################
# Following steps on slide 31
# First simulate sigma
chisq_MC <- rchisq(numb_sim, chisq_df)
sigma2_MC <- ((n-1)*Return_var)/(chisq_MC)
sigma_MC <- sqrt(sigma2_MC)
# Simulate mean of the VaR
for(sim in 1:numb_sim){
mu_MC <- rnorm(1,mean = Return_mean, sd = (sigma_MC[sim]/sqrt(n)))
}
# Simulate VaR alpha
VaR_alpha_MC = -V*(1 - exp(mu_MC +sigma_MC* norm_inverse))
hist(VaR_alpha_MC, breaks = 40)
VaR_MC_mean <- mean(VaR_alpha_MC)
VaR_MC_conf_int <- quantile(VaR_alpha_MC,conf_ints)
# Compare
Var_known
Var_known_conf_int
VaR_MC_mean
VaR_MC_conf_int
diff(Var_known_conf_int)
diff(VaR_MC_conf_int)
x <- seq(from= -19000, to = -12000, by = 1)
sigmas_known
sum(sigmas_known)/2
y_MC <- dnorm(x, mean = VaR_MC_mean, sd = sd(VaR_alpha_MC))
plot(x,y_known)
x <- seq(from= -19000, to = -12000, by = 1)
# Parameters for part a
# Not sure how to pick the standard deviation....
sd_known_mean <- mean(sqrt(sigmas_known))
y_known <- dnorm(x, mean = Var_known, sd=sd_known_mean )
# For MC calculations
y_MC <- dnorm(x, mean = VaR_MC_mean, sd = sd(VaR_alpha_MC))
plot(x,y_known)
y_known <- rnorm(1000, mean = Var_known, sd=sd_known_mean )
plot(x,y_known)
y_known <- rnorm(length(x), mean = Var_known, sd=sd_known_mean )
# For MC calculations
y_MC <- dnorm(x, mean = VaR_MC_mean, sd = sd(VaR_alpha_MC))
plot(x,y_known)
plot(y_known)
Var_known
sd_known_mean <- mean(sqrt(sigmas_known))
y_known <- dnorm(x, mean = Var_known, sd=sd_known_mean )
plot(y_known)
y_known
y_known <- dnorm(15700, mean = Var_known, sd=sd_known_mean )
y_known
y_known <- dnorm(-15700, mean = Var_known, sd=sd_known_mean )
y_known
y_known <- dnorm(VaR_known, mean = Var_known, sd=sd_known_mean )
y_known <- dnorm(Var_known, mean = Var_known, sd=sd_known_mean )
y_known
y_known <- rnorm(10000, mean = Var_known, sd=sd_known_mean )
summary(y_known)
sd(VaR_alpha_MC)
hist(rchisq(100000,df = (n-1)))
dchisq((beta/2) , df = chisq_df)
qchisq((beta/2) , df = chisq_df)
qchisq((1-beta/2) , df = chisq_df)
qchisq((beta) , df = chisq_df)
abline(v = (beta/2))
abline(v = qchisq((beta/2) , df = chisq_df))
abline(v = qchisq((1-beta/2) , df = chisq_df))
sd(rchisq(1000000, df = chisq_df))
chisq1 <- qchisq((beta/2) , df = chisq_df)
chisq2 <- qchisq((1-beta/2) , df = chisq_df)
chisq_avg <- (chisq1+chisq2)/2
sd_known_mean <- sqrt (((n-1)*Return_var)/chisq_avg)
y_known <- rnorm(10000, mean = Var_known, sd=sd_known_mean )
y_known <- dnorm(x, mean = Var_known, sd=sd_known_mean )
sd_known_mean <- sqrt (((n-1)*Return_var)/chisq_avg)
# Homework 5 Part 2
# Read data and look at summary statistics
data <- read.csv("SP500_Log_Returns_20150101_20160101.csv")
head(data)
Returns <- data[[4]]
plot(Returns, type = 'l')
hist(Returns, breaks = 30)
# Initialize parameters
V <- 1e6
alpha <- 0.95
beta <- 0.025
numb_sim <- 100000 # M
n <- length(Returns) # number of observations
# Part a
Return_mean <- mean(Returns)
Return_var <- var(Returns)
norm_inverse <- qnorm((1-alpha), mean= 0, sd=1)
Var_known = -V*(1 - exp(Return_mean +sqrt(Return_var)* norm_inverse))
# Use slide 27 equations for upper and lower sigma paramter
conf_int_quantile_down<- beta/2
conf_int_quantile_up <- 1-beta/2
conf_ints <- c(conf_int_quantile_down, conf_int_quantile_up)
chisq_df <- n-1
sigmas2_known <- ((n-1)*Return_var)/qchisq(p = conf_ints , df = chisq_df)
#sigma_down <- ((n-1)*Return_var)/qchisq(p = conf_int_quantile_down, df = chisq_df)
# Watch the signs?
Var_known_conf_int <- -V*(1 - exp(Return_mean +sqrt(sigmas2_known)* norm_inverse))
# Var_down <- -V*(1 - exp(Return_mean +sqrt(sigma_down)* norm_inverse))
############################################
############# Part b ########################
###########################################
# Following steps on slide 31
# First simulate sigma
chisq_MC <- rchisq(numb_sim, chisq_df)
sigma2_MC <- ((n-1)*Return_var)/(chisq_MC)
sigma_MC <- sqrt(sigma2_MC)
# Simulate mean of the VaR
for(sim in 1:numb_sim){
mu_MC <- rnorm(1,mean = Return_mean, sd = (sigma_MC[sim]/sqrt(n)))
}
# Simulate VaR alpha
VaR_alpha_MC = -V*(1 - exp(mu_MC +sigma_MC* norm_inverse))
hist(VaR_alpha_MC, breaks = 40)
VaR_MC_mean <- mean(VaR_alpha_MC)
VaR_MC_conf_int <- quantile(VaR_alpha_MC,conf_ints)
# Compare two method of finding VaR
Var_known
Var_known_conf_int
VaR_MC_mean
VaR_MC_conf_int
# The two methods are very similar. The means are slightly differeny but the confidence intervals overlap for the majority of the time.
# Approximating a compound poisson random variable
numb_sn <- 100000 # M
lambda <- 100 # Poisson process parameter
mu = 0.10 # Parameter for X
sigma = 0.4 # Parameter for X
# Begin approximating Sn
# Generate random values of N from poisson distribution
N_vector <- rpois(numb_sn, lambda)
# Compute a sample of Sn
Sn_sample <- function(N, mean = mu, std = sigma){
# Draw N random variables from distribution of X
log_X_k <- rnorm(N, mean = mu, sd = sigma)
X_k <- exp(log_X_k)
Sn <- sum(X_k)
return (Sn)
}
# Pre allocate space
Sn_MC_samples <- rep(0, numb_sn)
# Compute M copies of Sn
for (sample in 1:numb_sn){
N_i <- N_vector[sample]
Sn_MC_samples[sample] <- Sn_sample(N_i, mu, sigma)
}
# Plot the distribution with a normal density overlaid
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100 ,main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
}
makeHist(Sn_MC_samples)
####################### Quantile Stuff #############################
#################################################################
quantiles <- seq(from = 0.95, to = 0.9999, by = 0.0001)
# Empirical distribution quantiles
empirical_tail <- quantile(Sn_MC_samples, quantiles)
emp_tail <- 1 - empirical_tail
# Normal Approximation quantiles
Sn_mean <- mean(Sn_MC_samples)
Sn_sd <- sd(Sn_MC_samples)
norm_tail_approx <- qnorm(quantiles, Sn_mean, Sn_sd)
norm_tail <- 1- norm_tail_approx
# Gamma tail approx ... Equations from the book - pg 477 of pdf
# Or simplified equations on 497 in appendix
# This is not the 3 parameter gamma....
# Find the parameters using MLE in the MASS package
library(MASS)
gamma_params <- fitdistr(Sn_MC_samples, "gamma")
gamma_shape <- gamma_params$estimate[1]
gamma_rate <- gamma_params$estimate[2]
# Compute the quantiles and find the tail distribution
gamma_tail_approx <- qgamma(quantiles,shape = gamma_shape, rate = gamma_rate )
gamma_tail <- 1- gamma_tail_approx
# Plot on log log scale
# NOT ON LOG LOG SCALE
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'blue', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
# The approximations should not straddle the empirical distribution
# Plotting again to look more like his but same analytical problems
# Switch x and y axis
plot(emp_tail, quantiles, type = 'l', col = 'red', lwd = 2)
lines(norm_tail, quantiles, type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, quantiles, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
hist(N_vector)
plot(N_vector)
# Moments practice
X1 <- rpois(1000,9) # Generate random variable- try other random variables
EX1 <- mean(X1) # E[X] - first moment
VarX1 <- var(X1) # Variance = E[X^2] - E[X]^2
mean2 <- EX1^2 # E[X]^2
(EX2_hypo <- mean(X1^2) ) # E[X^2] ? hypothesis
(EX2_act <- VarX1 + mean2) # E[X^2] = Var(X) - E[X]^2
X1 <- rchisq(1000,9) # Generate random variable- try other random variables
EX1 <- mean(X1) # E[X] - first moment
VarX1 <- var(X1) # Variance = E[X^2] - E[X]^2
mean2 <- EX1^2 # E[X]^2
(EX2_hypo <- mean(X1^2) ) # E[X^2] ? hypothesis
(EX2_act <- VarX1 + mean2) # E[X^2] = Var(X) - E[X]^2
gamma_alpha <- (2*sqrt(lambda*EX2^3)/EX3 )^2
EX <- mean(Sn_MC_samples) # E[X]
EX2 <- mean(Sn_MC_samples^2) # E[X^2]
EX3 <- mean(Sn_MC_samples^3) # E[X^3]
gamma_alpha <- (2*sqrt(lambda*EX2^3)/EX3 )^2
gamma_beta <- sqrt(gamma_alpha/(lambda*EX2))
gamma_k <- lambda*EX - (alpha/beta)
gamma_k <- lambda*EX - (gamma_alpha/gamma_beta)
?rgamma
EX <- mean(Sn_MC_samples) # E[X]
EX2 <- mean(Sn_MC_samples^2) # E[X^2]
EX3 <- mean(Sn_MC_samples^3) # E[X^3]
gamma_alpha <- (2*sqrt(lambda*EX2^3)/EX3 )^2
gamma_beta <- sqrt(gamma_alpha/(lambda*EX2))
gamma_k <- lambda*EX - (gamma_alpha/gamma_beta)
# Compute the quantiles and find the tail distribution
gamma_tail_approx <- gamma_k + qgamma(quantiles,shape = gamma_alpha, scale = gamma_beta )
gamma_tail <- 1- gamma_tail_approx
# Plot on log log scale
# NOT ON LOG LOG SCALE
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'blue', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
# The approximations should not straddle the empirical distribution
# Plotting again to look more like his but same analytical problems
gamma_tail <- log(1- gamma_tail_approx)
# Plot on log log scale
# NOT ON LOG LOG SCALE
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'blue', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
# The approximations should not straddle the empirical distribution
gamma_tail_approx <- qgamma(quantiles,shape = gamma_alpha, scale = gamma_beta )
gamma_tail <- 1- gamma_tail_approx
# Plot on log log scale
# NOT ON LOG LOG SCALE
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'blue', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
plot(quantiles,emp_tail, log= 'y', type = 'l', col = 'red', lwd = 2)
plot(emp_tail, quantiles, log= 'y', type = 'l', col = 'red', lwd = 2)
plot(emp_tail, quantiles, log= 'y', type = 'l', col = 'red', lwd = 2)
lines(norm_tail, quantiles, type = 'l', col = 'blue', lwd = 2)
lines(norm_tail, log(quantiles), type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, quantiles, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
plot(quantiles,emp_tail, log= 'xy', type = 'l', col = 'red', lwd = 2)
log(-1)
log(0.1)
log(600)
exp(600)
quantiles <- 1- seq(from = 0.95, to = 0.99999, by = 0.0001)
# Empirical distribution quantiles
empirical_tail <- quantile(Sn_MC_samples, quantiles)
emp_tail <- 1 - empirical_tail
# Normal Approximation quantiles
Sn_mean <- mean(Sn_MC_samples)
Sn_sd <- sd(Sn_MC_samples)
norm_tail_approx <- qnorm(quantiles, Sn_mean, Sn_sd)
norm_tail <- 1- norm_tail_approx
# Gamma tail approx ... Equations from the book - pg 477 of pdf
EX <- mean(Sn_MC_samples) # E[X]
EX2 <- mean(Sn_MC_samples^2) # E[X^2]
EX3 <- mean(Sn_MC_samples^3) # E[X^3]
gamma_alpha <- (2*sqrt(lambda*EX2^3)/EX3 )^2
gamma_beta <- sqrt(gamma_alpha/(lambda*EX2))
gamma_k <- lambda*EX - (gamma_alpha/gamma_beta)
# Compute the quantiles and find the tail distribution
gamma_tail_approx <- qgamma(quantiles,shape = gamma_alpha, scale = gamma_beta )
gamma_tail <- 1- gamma_tail_approx
# Plot on log log scale
# NOT ON LOG LOG SCALE
plot(quantiles,emp_tail, log= 'xy', type = 'l', col = 'red', lwd = 2)
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'blue', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
# The approximations should not straddle the empirical distribution
# Plotting again to look more like his but same analytical problems
# Switch x and y axis
plot(emp_tail, quantiles, type = 'l', col = 'red', lwd = 2)
lines(norm_tail, quantiles, type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, quantiles, type = 'l', col = 'orange', lwd = 2)
# Homework 5 Part 2
# Read data and look at summary statistics
data <- read.csv("SP500_Log_Returns_20150101_20160101.csv")
head(data)
Returns <- data[[4]]
plot(Returns, type = 'l')
hist(Returns, breaks = 30)
# Initialize parameters
V <- 1e6
alpha <- 0.95
beta <- 0.025
numb_sim <- 100000 # M
n <- length(Returns) # number of observations
alpha <- 0.95
beta <- 0.025
numb_sim <- 100000 # M
n <- length(Returns) # number of observations
beta <- 0.025 # Estimate confidence
numb_sim <- 100000 # M
n <- length(Returns) # number of observations
# Part a
Return_mean <- mean(Returns)
Return_var <- var(Returns)
norm_inverse <- qnorm((1-alpha), mean= 0, sd=1)
Var_known = -V*(1 - exp(Return_mean +sqrt(Return_var)* norm_inverse))
Var_known = V*(1 - exp(Return_mean +sqrt(Return_var)* norm_inverse))
# Use slide 27 equations for upper and lower sigma paramter
conf_int_quantile_down<- beta/2
conf_int_quantile_up <- 1-beta/2
conf_ints <- c(conf_int_quantile_down, conf_int_quantile_up)
chisq_df <- n-1
sigmas2_known <- ((n-1)*Return_var)/qchisq(p = conf_ints , df = chisq_df) # stores 2 values, conf ints has both betas
# Use slide 27 equations for upper and lower sigma paramter
conf_int_quantile_down<- beta/2
conf_int_quantile_up <- 1-beta/2
conf_ints <- c(conf_int_quantile_down, conf_int_quantile_up)
chisq_df <- n-1
sigmas2_known <- ((n-1)*Return_var)/qchisq(p = conf_ints , df = chisq_df) # stores 2 values, conf ints has both betas
#sigma_down <- ((n-1)*Return_var)/qchisq(p = conf_int_quantile_down, df = chisq_df)
# Watch the signs?
Var_known_conf_int <- -V*(1 - exp(Return_mean +sqrt(sigmas2_known)* norm_inverse))
# Var_down <- -V*(1 - exp(Return_mean +sqrt(sigma_down)* norm_inverse))
# Var_down <- V*(1 - exp(Return_mean +sqrt(sigma_down)* norm_inverse))
############################################
############# Part b ########################
###########################################
# Following steps on slide 31
# First simulate sigma
chisq_MC <- rchisq(numb_sim, chisq_df)
sigma2_MC <- ((n-1)*Return_var)/(chisq_MC)
sigma_MC <- sqrt(sigma2_MC)
# Simulate mean of the VaR
# Simulate mean of the VaR
for(sim in 1:numb_sim){
mu_MC <- rnorm(1,mean = Return_mean, sd = (sigma_MC[sim]/sqrt(n)))
}
mu_MC <- rep(0, numb_sim)
mu_MC <- rep(0, numb_sim)
# Simulate mean of the VaR
for(sim in 1:numb_sim){
mu_MC[sim] <- rnorm(1,mean = Return_mean, sd = (sigma_MC[sim]/sqrt(n)))
}
# Simulate VaR alpha
VaR_alpha_MC = -V*(1 - exp(mu_MC +sigma_MC* norm_inverse))
hist(VaR_alpha_MC, breaks = 40)
VaR_MC_mean <- mean(VaR_alpha_MC)
VaR_MC_conf_int <- quantile(VaR_alpha_MC,conf_ints)
# Compare two method of finding VaR
Var_known
Var_known_conf_int
VaR_MC_mean
VaR_MC_conf_int
Var_known
Var_known_conf_int
VaR_MC_mean
VaR_MC_conf_int
# The two methods are very similar. The means are slightly different but the confidence intervals overlap for the majority of the time.
Var_known_conf_int <- V*(1 - exp(Return_mean +sqrt(sigmas2_known)* norm_inverse)) # Again 2 sigmas (high, low) in sigmas2_known
Var_known_conf_int
# Homework 5 Part 2
# Read data and look at summary statistics
data <- read.csv("SP500_Log_Returns_20150101_20160101.csv")
head(data)
Returns <- data[[4]]
plot(Returns, type = 'l')
hist(Returns, breaks = 30)
# Initialize parameters
V <- 1e6 # Portfolio value
alpha <- 0.95 # Var Confidence
beta <- 0.025 # Estimate confidence
numb_sim <- 100000 # M
n <- length(Returns) # number of observations
# Part a
Return_mean <- mean(Returns)
Return_var <- var(Returns)
norm_inverse <- qnorm((1-alpha), mean= 0, sd=1)
Var_known = V*(1 - exp(Return_mean +sqrt(Return_var)* norm_inverse))
# Use slide 27 equations for upper and lower sigma paramter
conf_int_quantile_down<- beta/2
conf_int_quantile_up <- 1-beta/2
conf_ints <- c(conf_int_quantile_down, conf_int_quantile_up)
chisq_df <- n-1
sigmas2_known <- ((n-1)*Return_var)/qchisq(p = conf_ints , df = chisq_df) # stores 2 values, conf ints has both betas
#sigma_down <- ((n-1)*Return_var)/qchisq(p = conf_int_quantile_down, df = chisq_df)
# Watch the signs?
Var_known_conf_int <- V*(1 - exp(Return_mean +sqrt(sigmas2_known)* norm_inverse)) # Again 2 sigmas (high, low) in sigmas2_known
# Var_down <- V*(1 - exp(Return_mean +sqrt(sigma_down)* norm_inverse))
############################################
############# Part b ########################
###########################################
# Following steps on slide 31
# First simulate sigma
chisq_MC <- rchisq(numb_sim, chisq_df)
sigma2_MC <- ((n-1)*Return_var)/(chisq_MC)
sigma_MC <- sqrt(sigma2_MC)
# Preallocate space
mu_MC <- rep(0, numb_sim)
# Simulate mean of the VaR
for(sim in 1:numb_sim){
mu_MC[sim] <- rnorm(1,mean = Return_mean, sd = (sigma_MC[sim]/sqrt(n)))
}
# Simulate VaR alpha
VaR_alpha_MC = V*(1 - exp(mu_MC +sigma_MC* norm_inverse))
hist(VaR_alpha_MC, breaks = 40)
VaR_MC_mean <- mean(VaR_alpha_MC)
VaR_MC_conf_int <- quantile(VaR_alpha_MC,conf_ints)
# Compare two method of finding VaR
Var_known
Var_known_conf_int
VaR_MC_mean
VaR_MC_conf_int
# The two methods are very similar. The means are slightly different but the confidence intervals overlap for the majority of the time.
